{% extends "nl_BE/base.stencil" %}

{% block title %}{{ block.super }} - Organiseer een spel{% endblock %}
{% block additional-head %}
<link rel="stylesheet" href="/public/css/pikaday.min.css">
<style>
#map {
    height: 400px;
}
</style>
{% endblock %}

{% block content %}
<h2>Organiseer een spel</h2>
<p>Vul het onderstaande formulier in om je spel aan te maken.</p>
<form method="post" action="/web/host-game">
    <h3>Spel</h3>
    <input name="id" type="hidden" value="{{ game.id }}">
    <div class="form-group">
        <label>Naam</label>
        {% if game.nameOptions %}
            <select class="form-control custom-select" name="name">
                {% for name in game.nameOptions %}
                    <option value="{{ name }}">{{ name }}</option>
                {% endfor %}
            </select>
        {% else %}
            <input class="form-control" name="name" type="text" value="{{ game.name }}" readonly>
        {% endif %}
    </div>
    <div class="form-group">
        <label>Aantal spelers</label>
        {% if game.playerCountOptions %}
            <select id="playerCount" class="form-control custom-select" name="playerCount">
                {% for playerCount in game.playerCountOptions %}
                    {% if playerCount == game.playerCountOptions|max %}
                        <option value="{{ playerCount }}" selected>{{ playerCount }}</option>
                    {% else %}
                        <option value="{{ playerCount }}">{{ playerCount }}</option>
                    {% endif %}
                {% endfor %}
            </select>
        {% else %}
            <input class="form-control" name="playerCount" type="text" value="{{ game.playerCount }}" readonly>
        {% endif %}
        <p class="form-text text-muted">
            Dit is het totaal aantal spelers, organisatoren meegerekend.
        </p>
    </div>
    <div class="form-group">
        <label>Minimum aantal spelers</label>
        {% if game.playerCountOptions %}
            <select id="minPlayerCount" class="form-control custom-select" name="minPlayerCount">
                {% for playerCount in game.playerCountOptions %}
                    <option value="{{ playerCount }}">{{ playerCount }}</option>
                {% endfor %}
            </select>
        {% else %}
            <input class="form-control" name="minPlayerCount" type="text" value="{{ game.playerCount }}" readonly>
        {% endif %}        
        <p class="form-text text-muted">
            Het minimum aantal spelers dat nodig is om het spel te laten doorgaan.
        </p>
    </div>
    <div class="form-group">
        <label>Aantal plaatsen te reserveren voor organisatoren</label>
        <select id="prereservedSeats" class="form-control custom-select" name="prereservedSeats">
            {% for seatCount in prereservedSeatsOptions %}
                {% if seatCount == 0 %}
                    <option value="{{ seatCount }}">Geen (ik neem niet deel)</option>
                {% else %}
                    <option value="{{ seatCount }}">{{ seatCount }}</option>
                {% endif %}
            {% endfor %}
            <!-- The default value will be selected in code later on. -->
        </select>
        <p class="form-text text-muted">
            Dit aantal wordt afgetrokken van het totaal aantal spelers bij het berekenen van het aantal vrije plaatsen.
        </p>
    </div>
    <h3>Datum en tijdstip</h3>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label>Datum</label>
            <div class="input-group">
                <i class="input-group-addon fa fa-calendar"></i>
                <input id="datepicker" class="form-control" type="text" readonly required>
            </div>
            <input id="day" name="day" type="hidden" value="{{ date.day }}">
            <input id="month" name="month" type="hidden" value="{{ date.month }}">
            <input id="year" name="year" type="hidden" value="{{ date.year }}">
        </div>
        <div class="form-group col-md-3">
            <label>Uur</label>
            <input class="form-control" name="hour" type="number" value="{{ date.hour }}" min="0" max="23" required>
        </div>
        <div class="form-group col-md-3">
            <label>Minuut</label>
            <input class="form-control" name="minute" type="number" value="{{ date.minute }}" min="0" max="59" required>
        </div>
    </div>
    <div class="form-group">
        <label>Deadline voor inschrijving</label>
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input" type="radio" name="deadline" value="one hour" checked>
                een uur op voorhand
            </label>
        </div>
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input" type="radio" name="deadline" value="one day">
                een dag op voorhand
            </label>
        </div>
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input" type="radio" name="deadline" value="two days">
                twee dagen op voorhand
            </label>
        </div>
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input" type="radio" name="deadline" value="one week">
                een week op voorhand
            </label>
        </div>
        <p class="form-text text-muted">
            Na het verstrijken van de deadline kan je als organisator nog steeds aanvragen goedkeuren of het spel annuleren.
        </p>
    </div>
    <h3>Adres</h3>
    <input id="address" name="address" type="hidden">
    <input id="city" name="city" type="hidden">
    <input id="latitude" name="latitude" type="hidden">
    <input id="longitude" name="longitude" type="hidden">
    <p>
        Deze adresgegevens worden getoond aan de spelers wiens aanvraag jij hebt goedkeurd.
    </p>
    {% if coordinates.actual %}
        <div class="form-group">
            <label class="form-check-label">
                <input id="use-saved-location" class="form-check-input" type="checkbox" checked>
                Gebruik mijn opgeslagen adres: {{ location.address }}.
            </label>
        </div>
    {% endif %}
    <div id="address-picker" class="form-group">
        <div class="input-group">
            <i class="input-group-addon fa fa-map-marker"></i>
            <input id="autocomplete" class="form-control" type="text" placeholder="Adres">
        </div>
        <p class="form-text text-muted">
            Maak gebruik van de automatische aanvulling en kies een adres uit de voorgestelde opties.
            Er zal een aanduiding verschijnen op de kaart wanneer je adres correct is ingegeven.
        </p>
        <div id="map"></div>
    </div>
    <h3>Extra informatie</h3>
    <div class="form-group">
        <textarea class="form-control" name="info" rows="8"></textarea>
    </div>
    <div class="form-group">
        <button id="submit" class="btn btn-primary" type="submit" disabled>Spel aanmaken</button>
    </div>
</form>
{% endblock %}

{% block additional-body %}
<script src="/public/js/pikaday.min.js"></script>
<script>
// Set up the date picker.
var picker = new Pikaday({
    field: document.getElementById("datepicker"),
    firstDay: 1,
    minDate: new Date(),
    defaultDate: new Date({{ date.year }}, {{ date.month }} - 1, {{ date.day }}),
    setDefaultDate: true,
    toString(date, format) {
        return date.toLocaleDateString("nl", { weekday: "long", year: "numeric", month: "long", day: "numeric" });
    },
    onSelect: function(date) {
        $("#day").val(date.getDate());
        $("#month").val(date.getMonth() + 1);
        $("#year").val(date.getFullYear());
    },
    i18n: {
        previousMonth : "Vorige maand",
        nextMonth     : "Volgende maand",
        months        : ["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"],
        weekdays      : ["Zondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrijdag","Zaterdag"],
        weekdaysShort : ["Zon","Ma","Di","Woe","Do","Vrij","Zat"]
    }
});
// Set prereservedSeats to 1 by default, or 0 for a single player game.
if ($("#prereservedSeats option").length > 1) {
    $("#prereservedSeats").val("1");
} else {
    $("#prereservedSeats").val("0");
}
// Adjust minPlayerCount and prereservedSeats when a new playerCount is selected.
$("#playerCount").on("change", function() {
    var playerCount = $(this).val();
    // If minPlayerCount is now invalid, set it to the new playerCount.
    if ($("#minPlayerCount").val() > playerCount) {
		$("#minPlayerCount").val(playerCount);
    }
    // Adjust the minPlayerCount options based on the new playerCount.
    $("#minPlayerCount option").each(function() {
        var minPlayerCount = $(this).attr("value");
        if (minPlayerCount <= playerCount) {
            $(this).removeAttr("disabled");
        } else {
            $(this).attr("disabled", "disabled");
        }
    });
    // If prereservedSeats is now invalid, set it to the highest valid option.
    if ($("#prereservedSeats").val() >= playerCount) {
        $("#prereservedSeats").val(playerCount - 1);
    }
    // Adjust the prereservedSeats options based on the new playerCount.
    $("#prereservedSeats option").each(function() {
        var seatCount = $(this).attr("value");
        if (seatCount < playerCount) {
            $(this).removeAttr("disabled");
        } else {
            $(this).attr("disabled", "disabled");
        }
    });
});
// Set up the map.
var map;
function loadMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        center: {
            lat: {{ coordinates.latitude }},
            lng: {{ coordinates.longitude }}
        },
        zoom: 15
    });
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key={{ googleAPIKey }}&libraries=places&callback=loadMap"></script>
<script>
// Set up the autocomplete address field.
var autocomplete = new google.maps.places.Autocomplete(document.getElementById("autocomplete"), {
    componentRestrictions: {
        country: {{ countries }}
    }
});
// Adjust the map and set a marker when the user enters an address.
var marker;
autocomplete.addListener("place_changed", function() {
    var place = autocomplete.getPlace();
    var cityComponent = place.address_components.find(function(component) {
        return component.types.indexOf("locality") != -1;
    });
    // Make sure the location contains a city (and it's not just a province or country).
    if (!cityComponent) {
        clearLocation();
        $("#submit").attr("disabled", "disabled");
        return
    }
    $("#address").val($("#autocomplete").val());
    var city = cityComponent.long_name;
    var coordinates = place.geometry.location;
    $("#city").val(city);
    $("#latitude").val(coordinates.lat);
    $("#longitude").val(coordinates.lng);
    if (!marker) {
        marker = new google.maps.Marker({
            position: coordinates,
            map: map
        });
    } else {
        marker.setPosition(coordinates);
    }
    map.setCenter(coordinates);
    $("#submit").removeAttr("disabled");
});
// Toggle the address picker.
$("#use-saved-location").on("change", function() {
    if (!this.checked) {
        clearLocation();
        $("#address-picker").show();
        // These next two statements make sure the map renders properly.
        // The map won't render properly when the address picker is hidden.
        google.maps.event.trigger(map, "resize");
        map.setCenter({
            lat: {{ coordinates.latitude }},
            lng: {{ coordinates.longitude }}
        });
        $("#submit").attr("disabled", "disabled");
    } else {
        setSavedLocation();
        $("#address-picker").hide();
        $("#submit").removeAttr("disabled");
    }
});
{% if coordinates.actual %}
    setSavedLocation();
    $("#address-picker").hide();
    $("#submit").removeAttr("disabled");
{% endif %}
// Helper functions.
function clearLocation() {
    $("#autocomplete").val("");
    $("#address").val("");
    $("#city").val("");
    $("#latitude").val("");
    $("#longitude").val("");
    if (marker) {
        marker.setMap(null);
        marker = null;
    }
}
function setSavedLocation() {
    $("#autocomplete").val("{{ location.address }}");
    $("#address").val("{{ location.address }}");
    $("#city").val("{{ location.city }}");
    $("#latitude").val("{{ coordinates.latitude }}");
    $("#longitude").val("{{ coordinates.longitude }}");
    var coordinates = {
        lat: {{ coordinates.latitude }},
        lng: {{ coordinates.longitude }}
    };
    if (!marker) {
        marker = new google.maps.Marker({
            position: coordinates,
            map: map
        });
    } else {
        marker.setPosition(coordinates);
    }
    map.setCenter(coordinates);
}
</script>
{% endblock %}
